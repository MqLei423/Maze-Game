//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/RotationControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ShareefSoftware.Input
{
    public partial class @RotationControl: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @RotationControl()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""RotationControl"",
    ""maps"": [
        {
            ""name"": ""SceneRotation"",
            ""id"": ""77c659d8-3a02-46f4-92bb-2d45172d0def"",
            ""actions"": [
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""2a7b56de-8fdc-4a1c-9b0b-3e8311304fa8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""632d8d0e-b6d4-4bcc-b003-c53e8fe90791"",
                    ""path"": ""<Keyboard>/0"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // SceneRotation
            m_SceneRotation = asset.FindActionMap("SceneRotation", throwIfNotFound: true);
            m_SceneRotation_Rotation = m_SceneRotation.FindAction("Rotation", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // SceneRotation
        private readonly InputActionMap m_SceneRotation;
        private List<ISceneRotationActions> m_SceneRotationActionsCallbackInterfaces = new List<ISceneRotationActions>();
        private readonly InputAction m_SceneRotation_Rotation;
        public struct SceneRotationActions
        {
            private @RotationControl m_Wrapper;
            public SceneRotationActions(@RotationControl wrapper) { m_Wrapper = wrapper; }
            public InputAction @Rotation => m_Wrapper.m_SceneRotation_Rotation;
            public InputActionMap Get() { return m_Wrapper.m_SceneRotation; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(SceneRotationActions set) { return set.Get(); }
            public void AddCallbacks(ISceneRotationActions instance)
            {
                if (instance == null || m_Wrapper.m_SceneRotationActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_SceneRotationActionsCallbackInterfaces.Add(instance);
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
            }

            private void UnregisterCallbacks(ISceneRotationActions instance)
            {
                @Rotation.started -= instance.OnRotation;
                @Rotation.performed -= instance.OnRotation;
                @Rotation.canceled -= instance.OnRotation;
            }

            public void RemoveCallbacks(ISceneRotationActions instance)
            {
                if (m_Wrapper.m_SceneRotationActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ISceneRotationActions instance)
            {
                foreach (var item in m_Wrapper.m_SceneRotationActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_SceneRotationActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public SceneRotationActions @SceneRotation => new SceneRotationActions(this);
        public interface ISceneRotationActions
        {
            void OnRotation(InputAction.CallbackContext context);
        }
    }
}
